/* The following code was generated by JFlex 1.6.1 */

package lexical;

import java_cup.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/paul0vinicius/√Årea de Trabalho/compilerC2assembly/src/lexical/lexical.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\25\1\31\1\32\1\33\1\32\22\0\1\25\1\100\1\21"+
    "\2\0\1\74\1\75\1\66\1\106\1\107\1\30\1\73\1\105\1\10"+
    "\1\67\1\27\1\1\7\3\1\2\1\2\1\102\1\101\1\72\1\71"+
    "\1\70\1\113\1\0\1\56\1\57\1\60\1\5\1\7\1\13\1\61"+
    "\1\4\1\62\2\4\1\15\1\4\1\63\1\4\1\11\2\4\1\64"+
    "\1\65\1\17\2\4\1\6\2\4\1\110\1\20\1\111\1\76\1\55"+
    "\1\0\1\34\1\23\1\42\1\46\1\40\1\12\1\50\1\44\1\45"+
    "\1\4\1\41\1\14\1\47\1\22\1\36\1\54\1\4\1\37\1\43"+
    "\1\35\1\16\1\26\1\52\1\24\1\53\1\51\1\103\1\77\1\104"+
    "\1\112\6\0\1\32\u1fa2\0\1\32\1\32\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\5\3\1\5\1\3"+
    "\1\6\1\7\13\3\1\1\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\2\3\0\3\2\1\35\1\36\1\37\1\40"+
    "\3\3\1\0\4\3\1\41\1\42\1\43\1\44\15\3"+
    "\1\45\1\3\1\46\14\3\3\0\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\2\1\0\1\35\1\0\4\2"+
    "\1\35\1\3\1\65\30\3\1\66\16\3\1\0\1\67"+
    "\1\70\1\71\1\0\1\3\1\72\4\3\1\73\1\74"+
    "\4\3\1\75\1\76\1\3\1\77\2\3\1\100\11\3"+
    "\1\101\13\3\1\102\1\3\1\103\1\104\7\3\1\105"+
    "\2\3\1\106\6\3\1\107\3\3\1\110\11\3\1\111"+
    "\2\3\1\112\1\3\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\14\3\1\122\3\3\1\123\3\3\1\124"+
    "\6\3\1\125\1\126\1\127\1\130\1\131\1\132\1\133"+
    "\1\134\1\135\1\136\5\3\1\137\2\3\1\140\7\3"+
    "\1\141\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0474"+
    "\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688\0\u06d4"+
    "\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850\0\u089c\0\u08e8\0\u0934"+
    "\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\114\0\u0afc\0\114"+
    "\0\114\0\114\0\114\0\114\0\114\0\114\0\114\0\114"+
    "\0\u0b48\0\u0b94\0\u0be0\0\u0c2c\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c"+
    "\0\114\0\114\0\114\0\u0da8\0\u0df4\0\u0e40\0\u07b8\0\u0e8c"+
    "\0\u0ed8\0\u0f24\0\u0f70\0\u0fbc\0\114\0\114\0\114\0\u1008"+
    "\0\u1054\0\u10a0\0\u10ec\0\u1138\0\u1184\0\u11d0\0\u121c\0\u1268"+
    "\0\u12b4\0\u1300\0\u134c\0\u1398\0\u0130\0\u13e4\0\u1430\0\u147c"+
    "\0\u14c8\0\u1514\0\u1560\0\u15ac\0\u15f8\0\u1644\0\u1690\0\u16dc"+
    "\0\u1728\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4\0\u18f0\0\114"+
    "\0\114\0\114\0\u193c\0\114\0\114\0\114\0\114\0\114"+
    "\0\114\0\114\0\114\0\114\0\u1988\0\u19d4\0\u1a20\0\u1a6c"+
    "\0\u1ab8\0\114\0\u1b04\0\u1b50\0\114\0\u1b9c\0\u0130\0\u1be8"+
    "\0\u1c34\0\u1c80\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48"+
    "\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u205c\0\u20a8"+
    "\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224\0\u2270\0\u22bc\0\u0130"+
    "\0\u2308\0\u2354\0\u23a0\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u251c"+
    "\0\u2568\0\u25b4\0\u2600\0\u264c\0\u2698\0\u26e4\0\u2730\0\114"+
    "\0\114\0\114\0\u277c\0\u27c8\0\u0130\0\u2814\0\u2860\0\u28ac"+
    "\0\u28f8\0\u0130\0\u0130\0\u2944\0\u2990\0\u29dc\0\u2a28\0\u0130"+
    "\0\u0130\0\u2a74\0\u0130\0\u2ac0\0\u2b0c\0\u0130\0\u2b58\0\u2ba4"+
    "\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8\0\u0130"+
    "\0\u2e04\0\u2e50\0\u2e9c\0\u2ee8\0\u2f34\0\u2f80\0\u2fcc\0\u3018"+
    "\0\u3064\0\u30b0\0\u30fc\0\u0130\0\u3148\0\u0130\0\u0130\0\u3194"+
    "\0\u31e0\0\u322c\0\u3278\0\u32c4\0\u3310\0\u335c\0\u0130\0\u33a8"+
    "\0\u33f4\0\u0130\0\u3440\0\u348c\0\u34d8\0\u3524\0\u3570\0\u35bc"+
    "\0\u0130\0\u3608\0\u3654\0\u36a0\0\u0130\0\u36ec\0\u3738\0\u3784"+
    "\0\u37d0\0\u381c\0\u3868\0\u38b4\0\u3900\0\u394c\0\u0130\0\u3998"+
    "\0\u39e4\0\u0130\0\u3a30\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130"+
    "\0\u0130\0\u0130\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60\0\u3bac\0\u3bf8"+
    "\0\u3c44\0\u3c90\0\u3cdc\0\u3d28\0\u3d74\0\u3dc0\0\u0130\0\u3e0c"+
    "\0\u3e58\0\u3ea4\0\u0130\0\u3ef0\0\u3f3c\0\u3f88\0\u0130\0\u3fd4"+
    "\0\u4020\0\u406c\0\u40b8\0\u4104\0\u4150\0\u0130\0\u0130\0\u0130"+
    "\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u419c"+
    "\0\u41e8\0\u4234\0\u4280\0\u42cc\0\u0130\0\u4318\0\u4364\0\u0130"+
    "\0\u43b0\0\u43fc\0\u4448\0\u4494\0\u44e0\0\u452c\0\u4578\0\u0130"+
    "\0\u0130";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\4\5\1\6\1\5\1\7\1\5"+
    "\1\10\1\11\1\12\1\11\2\2\1\5\1\13\1\5"+
    "\1\14\1\15\1\16\1\17\1\14\1\0\1\14\1\20"+
    "\1\21\1\5\1\22\1\23\1\5\1\24\1\25\1\5"+
    "\1\26\1\27\1\5\1\30\1\5\1\31\2\5\1\32"+
    "\10\5\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\115\0"+
    "\1\61\1\62\1\61\2\0\1\63\1\64\4\0\1\65"+
    "\1\66\2\67\4\0\1\63\13\0\1\64\26\0\1\70"+
    "\25\0\3\4\3\0\1\64\4\0\1\65\1\66\2\67"+
    "\20\0\1\64\26\0\1\70\25\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\32\5\36\0\1\71"+
    "\57\0\1\72\1\73\23\0\7\5\1\0\3\5\1\74"+
    "\3\5\2\0\3\5\1\0\1\5\5\0\2\5\1\75"+
    "\27\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\2\5\1\76\27\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\32\5\1\77"+
    "\26\0\7\5\1\0\7\5\2\0\1\100\2\5\1\0"+
    "\1\5\5\0\32\5\1\77\26\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\3\5\1\101\26\5"+
    "\53\0\2\14\2\0\1\14\1\0\1\14\61\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\14\1\102\2\0\1\14"+
    "\1\0\1\14\2\5\1\103\27\5\55\0\1\104\1\105"+
    "\40\0\1\106\113\0\1\107\23\0\7\5\1\0\5\5"+
    "\1\110\1\5\2\0\3\5\1\0\1\5\5\0\32\5"+
    "\27\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\5\0\17\5\1\111\12\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\4\5\1\112\25\5"+
    "\27\0\7\5\1\0\3\5\1\113\3\5\2\0\1\114"+
    "\1\5\1\115\1\0\1\5\5\0\32\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\1\116"+
    "\1\5\1\117\5\5\1\120\21\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\1\5\1\121"+
    "\6\5\1\122\1\123\4\5\1\124\13\5\27\0\7\5"+
    "\1\0\1\5\1\125\5\5\2\0\1\126\2\5\1\0"+
    "\1\5\5\0\32\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\2\5\1\127\1\5\1\130"+
    "\25\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\2\5\1\131\27\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\10\5\1\132"+
    "\21\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\21\5\1\133\1\134\1\135\1\136\1\137"+
    "\1\140\1\141\1\142\1\143\26\0\20\144\1\145\10\144"+
    "\1\0\34\144\1\0\25\144\1\0\3\70\63\0\1\146"+
    "\114\0\1\147\1\150\113\0\1\151\113\0\1\152\1\153"+
    "\1\0\1\50\5\0\1\55\102\0\1\154\1\0\1\155"+
    "\110\0\1\51\1\156\113\0\1\157\3\0\1\160\107\0"+
    "\1\161\113\0\1\162\5\0\1\163\105\0\1\164\112\0"+
    "\1\56\24\0\1\61\1\62\1\61\3\0\1\64\4\0"+
    "\1\65\1\66\2\67\20\0\1\64\26\0\1\70\25\0"+
    "\3\62\3\0\1\64\30\0\1\64\26\0\1\70\25\0"+
    "\3\165\1\0\1\165\1\0\1\165\2\0\2\165\7\0"+
    "\1\165\10\0\1\165\3\0\1\165\1\0\1\165\3\0"+
    "\1\165\7\0\3\165\6\0\1\166\25\0\3\167\4\0"+
    "\1\170\62\0\1\170\34\0\1\171\1\0\2\172\111\0"+
    "\1\171\2\172\110\0\1\173\1\174\77\0\3\70\3\0"+
    "\1\64\2\0\4\175\22\0\1\64\54\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\2\5\1\176"+
    "\27\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\3\5\1\177\26\5\27\0\7\5\1\0"+
    "\7\5\2\0\1\200\2\5\1\0\1\5\5\0\32\5"+
    "\27\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\5\0\7\5\1\201\1\5\1\202\20\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\4\5"+
    "\1\203\25\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\14\1\102\2\0\1\14\1\0\1\14\32\5\27\0"+
    "\7\5\1\0\3\5\1\204\3\5\2\0\3\5\1\0"+
    "\1\5\5\0\11\5\1\205\20\5\26\0\31\104\3\0"+
    "\60\104\1\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\1\5\1\206\30\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\20\5\1\207"+
    "\11\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\1\5\1\210\5\5\1\211\4\5\1\212"+
    "\15\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\7\5\1\213\22\5\27\0\7\5\1\0"+
    "\5\5\1\214\1\5\2\0\3\5\1\0\1\5\5\0"+
    "\32\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\1\5\1\215\30\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\7\5\1\216"+
    "\22\5\27\0\7\5\1\0\7\5\2\0\1\217\2\5"+
    "\1\0\1\5\5\0\32\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\1\220\31\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\1\221\2\5\1\222\26\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\2\5\1\223\27\5"+
    "\27\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\5\0\14\5\1\224\1\225\14\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\11\5\1\226"+
    "\20\5\27\0\7\5\1\0\3\5\1\227\3\5\2\0"+
    "\3\5\1\0\1\5\5\0\1\5\1\230\30\5\27\0"+
    "\7\5\1\0\5\5\1\231\1\5\2\0\3\5\1\0"+
    "\1\5\5\0\32\5\27\0\7\5\1\0\1\5\1\232"+
    "\5\5\2\0\3\5\1\0\1\5\5\0\32\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\1\5\1\233\30\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\11\5\1\234\20\5\27\0"+
    "\7\5\1\0\1\5\1\235\5\5\2\0\3\5\1\0"+
    "\1\5\5\0\32\5\27\0\7\5\1\0\3\5\1\236"+
    "\3\5\2\0\3\5\1\0\1\5\5\0\1\5\1\237"+
    "\30\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\2\5\1\240\27\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\2\5\1\241"+
    "\27\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\4\5\1\242\25\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\13\5\1\243"+
    "\16\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\2\5\1\244\27\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\1\5\1\245"+
    "\30\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\10\5\1\246\21\5\26\0\20\144\1\145"+
    "\10\144\1\0\34\144\1\172\25\144\1\0\1\144\1\0"+
    "\1\144\6\0\1\144\5\0\4\144\1\247\1\0\1\144"+
    "\5\0\2\144\1\0\1\144\26\0\1\144\24\0\1\144"+
    "\67\0\1\250\115\0\1\251\113\0\1\252\23\0\3\165"+
    "\1\0\1\165\1\0\1\165\1\0\1\64\2\165\1\65"+
    "\1\66\2\67\3\0\1\165\10\0\1\165\3\0\1\165"+
    "\1\0\1\165\3\0\1\165\5\0\1\64\1\0\3\165"+
    "\6\0\1\253\25\0\3\253\1\0\1\253\1\0\1\253"+
    "\2\0\2\253\7\0\1\253\10\0\1\253\3\0\1\253"+
    "\1\0\1\253\3\0\1\253\7\0\3\253\34\0\3\167"+
    "\6\0\4\175\77\0\3\167\126\0\2\172\110\0\1\172"+
    "\114\0\1\172\77\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\1\254\31\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\14\5\1\255"+
    "\15\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\11\5\1\256\20\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\2\5\1\257"+
    "\27\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\1\260\31\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\1\261\31\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\12\5\1\262\17\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\2\5\1\263\27\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\4\5\1\264\25\5\27\0\7\5\1\0\5\5\1\265"+
    "\1\5\2\0\3\5\1\0\1\5\5\0\32\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\1\5\1\266\30\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\11\5\1\267\20\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\4\5\1\270\25\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\13\5\1\271\16\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\4\5\1\272\25\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\4\5\1\273\25\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\1\5\1\274\5\5\1\275\22\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\3\5\1\276"+
    "\26\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\1\5\1\277\30\5\27\0\7\5\1\0"+
    "\5\5\1\300\1\5\2\0\3\5\1\0\1\5\5\0"+
    "\32\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\3\5\1\301\26\5\27\0\7\5\1\0"+
    "\7\5\2\0\1\302\2\5\1\0\1\5\5\0\32\5"+
    "\27\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\5\0\4\5\1\303\25\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\1\5\1\304\30\5"+
    "\27\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\5\0\11\5\1\305\20\5\27\0\7\5\1\0\7\5"+
    "\2\0\1\5\1\306\1\5\1\0\1\5\5\0\32\5"+
    "\27\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\5\0\1\307\31\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\2\5\1\310\27\5\27\0"+
    "\7\5\1\0\3\5\1\311\3\5\2\0\3\5\1\0"+
    "\1\5\5\0\32\5\27\0\7\5\1\0\5\5\1\312"+
    "\1\5\2\0\3\5\1\0\1\5\5\0\32\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\11\5\1\313\20\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\2\5\1\314\27\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\2\5\1\315\27\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\13\5\1\316\16\5\27\0"+
    "\7\5\1\0\7\5\2\0\1\317\2\5\1\0\1\5"+
    "\5\0\32\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\1\320\31\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\3\5\1\321"+
    "\26\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\1\322\31\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\3\5\1\323\26\5"+
    "\27\0\3\144\1\0\1\144\1\0\1\144\2\0\2\144"+
    "\7\0\1\144\10\0\1\144\3\0\1\144\1\0\1\144"+
    "\3\0\1\144\7\0\3\144\34\0\3\253\1\0\1\253"+
    "\1\0\1\253\1\0\1\64\2\253\7\0\1\253\10\0"+
    "\1\253\3\0\1\253\1\0\1\253\3\0\1\253\5\0"+
    "\1\64\1\0\3\253\34\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\1\5\1\324\30\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\14\5\1\325\15\5\27\0\7\5\1\0\7\5\2\0"+
    "\1\326\2\5\1\0\1\5\5\0\32\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\5\5"+
    "\1\327\24\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\1\5\1\330\30\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\12\5"+
    "\1\331\17\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\3\5\1\332\26\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\3\5"+
    "\1\333\26\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\7\5\1\334\22\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\3\5"+
    "\1\335\26\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\11\5\1\336\20\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\1\5"+
    "\1\337\30\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\11\5\1\340\20\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\6\5"+
    "\1\341\23\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\1\5\1\342\30\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\4\5"+
    "\1\343\25\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\2\5\1\344\27\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\6\5"+
    "\1\345\23\5\27\0\7\5\1\0\7\5\2\0\1\346"+
    "\2\5\1\0\1\5\5\0\32\5\27\0\7\5\1\0"+
    "\3\5\1\347\3\5\2\0\3\5\1\0\1\5\5\0"+
    "\32\5\27\0\7\5\1\0\5\5\1\350\1\5\2\0"+
    "\3\5\1\0\1\5\5\0\32\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\4\5\1\351"+
    "\25\5\27\0\7\5\1\0\7\5\2\0\1\352\2\5"+
    "\1\0\1\5\5\0\32\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\14\5\1\353\15\5"+
    "\27\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\5\0\13\5\1\354\16\5\27\0\7\5\1\0\3\5"+
    "\1\355\3\5\2\0\3\5\1\0\1\5\5\0\32\5"+
    "\27\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\5\0\20\5\1\356\11\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\4\5\1\357\25\5"+
    "\27\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\5\0\14\5\1\360\15\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\4\5\1\361\25\5"+
    "\27\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\5\0\1\5\1\362\30\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\4\5\1\363\25\5"+
    "\27\0\7\5\1\0\7\5\2\0\1\364\2\5\1\0"+
    "\1\5\5\0\32\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\11\5\1\365\20\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\4\5\1\366\25\5\27\0\7\5\1\0\7\5\2\0"+
    "\1\367\2\5\1\0\1\5\5\0\32\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\11\5"+
    "\1\370\20\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\1\5\1\371\30\5\27\0\7\5"+
    "\1\0\7\5\2\0\1\372\2\5\1\0\1\5\5\0"+
    "\32\5\27\0\7\5\1\0\7\5\2\0\1\373\2\5"+
    "\1\0\1\5\5\0\32\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\6\5\1\374\23\5"+
    "\27\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\5\0\1\5\1\375\30\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\12\5\1\376\17\5"+
    "\27\0\7\5\1\0\1\5\1\377\5\5\2\0\3\5"+
    "\1\0\1\5\5\0\32\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\10\5\1\u0100\21\5"+
    "\27\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\5\0\4\5\1\u0101\25\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\4\5\1\u0102\25\5"+
    "\27\0\7\5\1\0\3\5\1\u0103\3\5\2\0\3\5"+
    "\1\0\1\5\5\0\32\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\6\5\1\u0104\23\5"+
    "\27\0\7\5\1\0\7\5\2\0\1\u0105\2\5\1\0"+
    "\1\5\5\0\32\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\11\5\1\u0106\20\5\27\0"+
    "\7\5\1\0\3\5\1\u0107\3\5\2\0\3\5\1\0"+
    "\1\5\5\0\32\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\3\5\1\u0108\26\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\11\5\1\u0109\20\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\1\5\1\u010a\30\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\11\5\1\u010b\20\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\1\u010c\31\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\4\5"+
    "\1\u010d\25\5\27\0\7\5\1\0\3\5\1\u010e\3\5"+
    "\2\0\3\5\1\0\1\5\5\0\32\5\27\0\7\5"+
    "\1\0\1\5\1\u010f\5\5\2\0\3\5\1\0\1\5"+
    "\5\0\32\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\6\5\1\u0110\23\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\4\5"+
    "\1\u0111\25\5\27\0\7\5\1\0\5\5\1\u0112\1\5"+
    "\2\0\3\5\1\0\1\5\5\0\32\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\1\5"+
    "\1\u0113\30\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\21\5\1\u0114\10\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\1\u0115"+
    "\1\5\1\u0116\27\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\6\5\1\u0117\23\5\27\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\1\5\5\0"+
    "\4\5\1\u0118\25\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\11\5\1\u0119\20\5\27\0"+
    "\7\5\1\0\7\5\2\0\1\u011a\2\5\1\0\1\5"+
    "\5\0\32\5\27\0\7\5\1\0\5\5\1\u011b\1\5"+
    "\2\0\3\5\1\0\1\5\5\0\32\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\6\5"+
    "\1\u011c\23\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\12\5\1\u011d\17\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\12\5"+
    "\1\u011e\17\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\4\5\1\u011f\25\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\1\5"+
    "\1\u0120\30\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\3\5\1\u0121\26\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\4\5"+
    "\1\u0122\25\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\21\5\1\u0123\10\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\7\5"+
    "\1\u0124\22\5\27\0\7\5\1\0\1\5\1\u0125\5\5"+
    "\2\0\3\5\1\0\1\5\5\0\32\5\27\0\7\5"+
    "\1\0\7\5\2\0\2\5\1\u0126\1\0\1\5\5\0"+
    "\32\5\27\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\5\0\6\5\1\u0127\23\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\1\u0128\31\5"+
    "\27\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\5\0\3\5\1\u0129\26\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\21\5\1\u012a\10\5"+
    "\27\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\5\0\21\5\1\u012b\10\5\27\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\5\0\3\5\1\u012c\26\5"+
    "\27\0\7\5\1\0\7\5\2\0\1\u012d\2\5\1\0"+
    "\1\5\5\0\32\5\27\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\5\0\1\u012e\31\5\27\0\7\5"+
    "\1\0\3\5\1\u012f\3\5\2\0\3\5\1\0\1\5"+
    "\5\0\32\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\17\5\1\u0130\12\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\7\5"+
    "\1\u0131\22\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\2\5\1\u0132\27\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\7\5"+
    "\1\u0133\22\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\6\5\1\u0134\23\5\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\5\0\4\5"+
    "\1\u0135\25\5\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\5\0\1\u0136\31\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\3\5\1\u0137"+
    "\26\5\27\0\7\5\1\0\3\5\1\u0138\3\5\2\0"+
    "\3\5\1\0\1\5\5\0\32\5\27\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\5\0\1\5\1\u0139"+
    "\30\5\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17860];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\43\1\1\11\1\1\11\11\1\1\3\0"+
    "\4\1\3\11\3\1\1\0\5\1\3\11\34\1\3\0"+
    "\1\1\3\11\1\1\11\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\2\1\1\11\51\1\1\0\3\11\1\0"+
    "\216\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 226) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* discard bad characters */
            }
          case 99: break;
          case 2: 
            { return symbol(sym.I_CONSTANT , new String(yytext()));
            }
          case 100: break;
          case 3: 
            { return check_type();
            }
          case 101: break;
          case 4: 
            { return '-';
            }
          case 102: break;
          case 5: 
            { /* whitespace separates tokens */
            }
          case 103: break;
          case 6: 
            { return '/';
            }
          case 104: break;
          case 7: 
            { return '*';
            }
          case 105: break;
          case 8: 
            { return '.';
            }
          case 106: break;
          case 9: 
            { return '>';
            }
          case 107: break;
          case 10: 
            { return symbol(sym.EQ);
            }
          case 108: break;
          case 11: 
            { return '<';
            }
          case 109: break;
          case 12: 
            { return '+';
            }
          case 110: break;
          case 13: 
            { return '%';
            }
          case 111: break;
          case 14: 
            { return '&';
            }
          case 112: break;
          case 15: 
            { return '^';
            }
          case 113: break;
          case 16: 
            { return '|';
            }
          case 114: break;
          case 17: 
            { return '!';
            }
          case 115: break;
          case 18: 
            { return symbol(sym.SEMICOLON);
            }
          case 116: break;
          case 19: 
            { return symbol(sym.COLON);
            }
          case 117: break;
          case 20: 
            { return '{';
            }
          case 118: break;
          case 21: 
            { return '}';
            }
          case 119: break;
          case 22: 
            { return symbol(sym.COMMA);
            }
          case 120: break;
          case 23: 
            { return '(';
            }
          case 121: break;
          case 24: 
            { return ')';
            }
          case 122: break;
          case 25: 
            { return '[';
            }
          case 123: break;
          case 26: 
            { return ']';
            }
          case 124: break;
          case 27: 
            { return symbol(sym.COMP);
            }
          case 125: break;
          case 28: 
            { return '?';
            }
          case 126: break;
          case 29: 
            { return symbol(sym.F_CONSTANT , new String(yytext()));
            }
          case 127: break;
          case 30: 
            { return symbol(sym.DEC_OP);
            }
          case 128: break;
          case 31: 
            { return symbol(sym.PTR_OP);
            }
          case 129: break;
          case 32: 
            { return symbol(sym.SUB_ASSIGN);
            }
          case 130: break;
          case 33: 
            { /* consume //-comment */
            }
          case 131: break;
          case 34: 
            { comment();
            }
          case 132: break;
          case 35: 
            { return symbol(sym.DIV_ASSIGN);
            }
          case 133: break;
          case 36: 
            { return symbol(sym.MUL_ASSIGN);
            }
          case 134: break;
          case 37: 
            { return symbol(sym.IF);
            }
          case 135: break;
          case 38: 
            { return symbol(sym.DO);
            }
          case 136: break;
          case 39: 
            { return symbol(sym.RIGHT_OP);
            }
          case 137: break;
          case 40: 
            { return symbol(sym.GE_OP);
            }
          case 138: break;
          case 41: 
            { return symbol(sym.EQ_OP);
            }
          case 139: break;
          case 42: 
            { return symbol(sym.LE_OP);
            }
          case 140: break;
          case 43: 
            { return symbol(sym.LEFT_OP);
            }
          case 141: break;
          case 44: 
            { return symbol(sym.ADD_ASSIGN);
            }
          case 142: break;
          case 45: 
            { return symbol(sym.INC_OP);
            }
          case 143: break;
          case 46: 
            { return symbol(sym.MOD_ASSIGN);
            }
          case 144: break;
          case 47: 
            { return symbol(sym.AND_ASSIGN);
            }
          case 145: break;
          case 48: 
            { return symbol(sym.AND_OP);
            }
          case 146: break;
          case 49: 
            { return symbol(sym.XOR_ASSIGN);
            }
          case 147: break;
          case 50: 
            { return symbol(sym.OR_ASSIGN);
            }
          case 148: break;
          case 51: 
            { return symbol(sym.OR_OP);
            }
          case 149: break;
          case 52: 
            { return symbol(sym.NE_OP);
            }
          case 150: break;
          case 53: 
            { return symbol(sym.FOR);
            }
          case 151: break;
          case 54: 
            { return symbol(sym.INT);
            }
          case 152: break;
          case 55: 
            { return symbol(sym.ELLIPSIS);
            }
          case 153: break;
          case 56: 
            { return symbol(sym.RIGHT_ASSIGN);
            }
          case 154: break;
          case 57: 
            { return symbol(sym.LEFT_ASSIGN);
            }
          case 155: break;
          case 58: 
            { return symbol(sym.LONG);
            }
          case 156: break;
          case 59: 
            { return symbol(sym.VOID);
            }
          case 157: break;
          case 60: 
            { return symbol(sym.AUTO);
            }
          case 158: break;
          case 61: 
            { return symbol(sym.ELSE);
            }
          case 159: break;
          case 62: 
            { return symbol(sym.ENUM);
            }
          case 160: break;
          case 63: 
            { return symbol(sym.CASE);
            }
          case 161: break;
          case 64: 
            { return symbol(sym.CHAR);
            }
          case 162: break;
          case 65: 
            { return symbol(sym.GOTO);
            }
          case 163: break;
          case 66: 
            { return symbol(sym.FLOAT);
            }
          case 164: break;
          case 67: 
            { return symbol(sym.UNION);
            }
          case 165: break;
          case 68: 
            { return symbol(sym.BREAK);
            }
          case 166: break;
          case 69: 
            { return symbol(sym.CONST);
            }
          case 167: break;
          case 70: 
            { return symbol(sym.SHORT);
            }
          case 168: break;
          case 71: 
            { return symbol(sym.WHILE);
            }
          case 169: break;
          case 72: 
            { return symbol(sym.BOOL);
            }
          case 170: break;
          case 73: 
            { return symbol(sym.RETURN);
            }
          case 171: break;
          case 74: 
            { return symbol(sym.EXTERN);
            }
          case 172: break;
          case 75: 
            { return symbol(sym.STATIC);
            }
          case 173: break;
          case 76: 
            { return symbol(sym.STRUCT);
            }
          case 174: break;
          case 77: 
            { return symbol(sym.SIGNED);
            }
          case 175: break;
          case 78: 
            { return symbol(sym.SIZEOF);
            }
          case 176: break;
          case 79: 
            { return symbol(sym.SWITCH);
            }
          case 177: break;
          case 80: 
            { return symbol(sym.INLINE);
            }
          case 178: break;
          case 81: 
            { return symbol(sym.DOUBLE);
            }
          case 179: break;
          case 82: 
            { return symbol(sym.TYPEDEF);
            }
          case 180: break;
          case 83: 
            { return symbol(sym.DEFAULT);
            }
          case 181: break;
          case 84: 
            { return symbol(sym.ATOMIC);
            }
          case 182: break;
          case 85: 
            { return symbol(sym.UNSIGNED);
            }
          case 183: break;
          case 86: 
            { return symbol(sym.VOLATILE);
            }
          case 184: break;
          case 87: 
            { return symbol(sym.RESTRICT);
            }
          case 185: break;
          case 88: 
            { return symbol(sym.REGISTER);
            }
          case 186: break;
          case 89: 
            { return symbol(sym.CONTINUE);
            }
          case 187: break;
          case 90: 
            { return symbol(sym.FUNC_NAME);
            }
          case 188: break;
          case 91: 
            { return symbol(sym.ALIGNAS);
            }
          case 189: break;
          case 92: 
            { return symbol(sym.ALIGNOF);
            }
          case 190: break;
          case 93: 
            { return symbol(sym.COMPLEX);
            }
          case 191: break;
          case 94: 
            { return symbol(sym.GENERIC);
            }
          case 192: break;
          case 95: 
            { return symbol(sym.NORETURN);
            }
          case 193: break;
          case 96: 
            { return symbol(sym.IMAGINARY);
            }
          case 194: break;
          case 97: 
            { return symbol(sym.THREAD_LOCAL);
            }
          case 195: break;
          case 98: 
            { return symbol(sym.STATIC_ASSERT);
            }
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
