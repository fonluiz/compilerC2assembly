/* The following code was generated by JFlex 1.3.5 on 25/02/18 17:41 */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 25/02/18 17:41 from the specification file
 * <tt>file:/home/luiz/Faculdade/compilerC2assembly/compilerC/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\20\1\16\1\0\1\20\1\17\16\0\4\0\1\20\1\64"+
    "\1\53\1\0\1\0\1\60\1\61\1\50\1\72\1\73\1\15\1\57"+
    "\1\70\1\5\1\52\1\14\1\46\11\1\1\71\1\65\1\56\1\55"+
    "\1\54\1\77\1\0\4\3\1\4\1\7\5\2\1\11\10\2\1\13"+
    "\2\2\1\47\2\2\1\74\1\51\1\75\1\62\1\2\1\0\1\21"+
    "\1\24\1\30\1\35\1\26\1\6\1\40\1\32\1\34\1\2\1\27"+
    "\1\10\1\36\1\33\1\23\1\44\1\2\1\25\1\31\1\22\1\12"+
    "\1\45\1\42\1\37\1\43\1\41\1\66\1\63\1\67\1\76\41\0"+
    "\2\0\4\0\4\0\1\0\2\0\1\0\7\0\1\0\4\0\1\0"+
    "\5\0\27\0\1\0\37\0\1\0\u01ca\0\4\0\14\0\16\0\5\0"+
    "\7\0\1\0\1\0\1\0\21\0\160\0\5\0\1\0\2\0\2\0"+
    "\4\0\10\0\1\0\1\0\3\0\1\0\1\0\1\0\24\0\1\0"+
    "\123\0\1\0\213\0\1\0\5\0\2\0\236\0\11\0\46\0\2\0"+
    "\1\0\7\0\47\0\7\0\1\0\1\0\55\0\1\0\1\0\1\0"+
    "\2\0\1\0\2\0\1\0\1\0\10\0\33\0\5\0\3\0\15\0"+
    "\5\0\6\0\1\0\4\0\13\0\5\0\53\0\37\0\4\0\2\0"+
    "\1\0\143\0\1\0\1\0\10\0\1\0\6\0\2\0\2\0\1\0"+
    "\4\0\2\0\12\0\3\0\2\0\1\0\17\0\1\0\1\0\1\0"+
    "\36\0\33\0\2\0\131\0\13\0\1\0\16\0\12\0\41\0\11\0"+
    "\2\0\4\0\1\0\5\0\26\0\4\0\1\0\11\0\1\0\3\0"+
    "\1\0\5\0\22\0\31\0\3\0\104\0\1\0\1\0\13\0\67\0"+
    "\33\0\1\0\4\0\66\0\3\0\1\0\22\0\1\0\7\0\12\0"+
    "\2\0\2\0\12\0\1\0\7\0\1\0\7\0\1\0\3\0\1\0"+
    "\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0\1\0\3\0"+
    "\4\0\2\0\1\0\1\0\7\0\2\0\2\0\2\0\3\0\1\0"+
    "\10\0\1\0\4\0\2\0\1\0\3\0\2\0\2\0\12\0\4\0"+
    "\7\0\1\0\5\0\3\0\1\0\6\0\4\0\2\0\2\0\26\0"+
    "\1\0\7\0\1\0\2\0\1\0\2\0\1\0\2\0\2\0\1\0"+
    "\1\0\5\0\4\0\2\0\2\0\3\0\3\0\1\0\7\0\4\0"+
    "\1\0\1\0\7\0\14\0\3\0\1\0\13\0\3\0\1\0\11\0"+
    "\1\0\3\0\1\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0"+
    "\2\0\1\0\1\0\10\0\1\0\3\0\1\0\3\0\2\0\1\0"+
    "\17\0\2\0\2\0\2\0\12\0\1\0\1\0\17\0\3\0\1\0"+
    "\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0"+
    "\5\0\2\0\1\0\1\0\7\0\2\0\2\0\2\0\3\0\10\0"+
    "\2\0\4\0\2\0\1\0\3\0\2\0\2\0\12\0\1\0\1\0"+
    "\20\0\1\0\1\0\1\0\6\0\3\0\3\0\1\0\4\0\3\0"+
    "\2\0\1\0\1\0\1\0\2\0\3\0\2\0\3\0\3\0\3\0"+
    "\14\0\4\0\5\0\3\0\3\0\1\0\4\0\2\0\1\0\6\0"+
    "\1\0\16\0\12\0\11\0\1\0\7\0\3\0\1\0\10\0\1\0"+
    "\3\0\1\0\27\0\1\0\12\0\1\0\5\0\3\0\1\0\7\0"+
    "\1\0\3\0\1\0\4\0\7\0\2\0\1\0\2\0\6\0\2\0"+
    "\2\0\2\0\12\0\22\0\2\0\1\0\10\0\1\0\3\0\1\0"+
    "\27\0\1\0\12\0\1\0\5\0\2\0\1\0\1\0\7\0\1\0"+
    "\3\0\1\0\4\0\7\0\2\0\7\0\1\0\1\0\2\0\2\0"+
    "\2\0\12\0\1\0\2\0\17\0\2\0\1\0\10\0\1\0\3\0"+
    "\1\0\51\0\2\0\1\0\7\0\1\0\3\0\1\0\4\0\1\0"+
    "\10\0\1\0\10\0\2\0\2\0\2\0\12\0\12\0\6\0\2\0"+
    "\2\0\1\0\22\0\3\0\30\0\1\0\11\0\1\0\1\0\2\0"+
    "\7\0\3\0\1\0\4\0\6\0\1\0\1\0\1\0\10\0\22\0"+
    "\2\0\15\0\60\0\1\0\2\0\7\0\4\0\10\0\10\0\1\0"+
    "\12\0\47\0\2\0\1\0\1\0\2\0\2\0\1\0\1\0\2\0"+
    "\1\0\6\0\4\0\1\0\7\0\1\0\3\0\1\0\1\0\1\0"+
    "\1\0\2\0\2\0\1\0\4\0\1\0\2\0\6\0\1\0\2\0"+
    "\1\0\2\0\5\0\1\0\1\0\1\0\6\0\2\0\12\0\2\0"+
    "\4\0\40\0\1\0\27\0\2\0\6\0\12\0\13\0\1\0\1\0"+
    "\1\0\1\0\1\0\4\0\2\0\10\0\1\0\44\0\4\0\24\0"+
    "\1\0\2\0\5\0\13\0\1\0\44\0\11\0\1\0\71\0\53\0"+
    "\24\0\1\0\12\0\6\0\6\0\4\0\4\0\3\0\1\0\3\0"+
    "\2\0\7\0\3\0\4\0\15\0\14\0\1\0\17\0\2\0\46\0"+
    "\1\0\1\0\5\0\1\0\2\0\53\0\1\0\u014d\0\1\0\4\0"+
    "\2\0\7\0\1\0\1\0\1\0\4\0\2\0\51\0\1\0\4\0"+
    "\2\0\41\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0"+
    "\2\0\17\0\1\0\71\0\1\0\4\0\2\0\103\0\2\0\3\0"+
    "\40\0\20\0\20\0\125\0\14\0\u026c\0\2\0\21\0\1\0\32\0"+
    "\5\0\113\0\3\0\3\0\17\0\15\0\1\0\4\0\3\0\13\0"+
    "\22\0\3\0\13\0\22\0\2\0\14\0\15\0\1\0\3\0\1\0"+
    "\2\0\14\0\64\0\40\0\3\0\1\0\3\0\2\0\1\0\2\0"+
    "\12\0\41\0\3\0\2\0\12\0\6\0\130\0\10\0\51\0\1\0"+
    "\1\0\5\0\106\0\12\0\35\0\3\0\14\0\4\0\14\0\12\0"+
    "\12\0\36\0\2\0\5\0\13\0\54\0\4\0\21\0\7\0\2\0"+
    "\6\0\12\0\46\0\27\0\5\0\4\0\65\0\12\0\1\0\35\0"+
    "\2\0\13\0\6\0\12\0\15\0\1\0\130\0\5\0\57\0\21\0"+
    "\7\0\4\0\12\0\21\0\11\0\14\0\3\0\36\0\15\0\2\0"+
    "\12\0\54\0\16\0\14\0\44\0\24\0\10\0\12\0\3\0\3\0"+
    "\12\0\44\0\122\0\3\0\1\0\25\0\4\0\1\0\4\0\3\0"+
    "\2\0\11\0\300\0\47\0\25\0\4\0\u0116\0\2\0\6\0\2\0"+
    "\46\0\2\0\6\0\2\0\10\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\37\0\2\0\65\0\1\0\7\0\1\0\1\0\3\0"+
    "\3\0\1\0\7\0\3\0\4\0\2\0\6\0\4\0\15\0\5\0"+
    "\3\0\1\0\7\0\16\0\5\0\32\0\5\0\20\0\2\0\23\0"+
    "\1\0\13\0\5\0\5\0\6\0\1\0\1\0\15\0\1\0\20\0"+
    "\15\0\3\0\33\0\25\0\15\0\4\0\1\0\3\0\14\0\21\0"+
    "\1\0\4\0\1\0\2\0\12\0\1\0\1\0\3\0\5\0\6\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\4\0\1\0\13\0\2\0"+
    "\4\0\5\0\5\0\4\0\1\0\21\0\51\0\u0a77\0\57\0\1\0"+
    "\57\0\1\0\205\0\6\0\4\0\3\0\2\0\14\0\46\0\1\0"+
    "\1\0\5\0\1\0\2\0\70\0\7\0\1\0\17\0\1\0\27\0"+
    "\11\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0"+
    "\1\0\7\0\1\0\7\0\1\0\7\0\1\0\40\0\57\0\1\0"+
    "\u01d5\0\3\0\31\0\11\0\6\0\1\0\5\0\2\0\5\0\4\0"+
    "\126\0\2\0\2\0\2\0\3\0\1\0\132\0\1\0\4\0\5\0"+
    "\51\0\3\0\136\0\21\0\33\0\65\0\20\0\u0200\0\u19b6\0\112\0"+
    "\u51cd\0\63\0\u048d\0\103\0\56\0\2\0\u010d\0\3\0\20\0\12\0"+
    "\2\0\24\0\57\0\1\0\4\0\12\0\1\0\31\0\7\0\1\0"+
    "\120\0\2\0\45\0\11\0\2\0\147\0\2\0\4\0\1\0\4\0"+
    "\14\0\13\0\115\0\12\0\1\0\3\0\1\0\4\0\1\0\27\0"+
    "\5\0\20\0\1\0\7\0\64\0\14\0\2\0\62\0\21\0\13\0"+
    "\12\0\6\0\22\0\6\0\3\0\1\0\4\0\12\0\34\0\10\0"+
    "\2\0\27\0\15\0\14\0\35\0\3\0\4\0\57\0\16\0\16\0"+
    "\1\0\12\0\46\0\51\0\16\0\11\0\3\0\1\0\10\0\2\0"+
    "\2\0\12\0\6\0\27\0\3\0\1\0\1\0\4\0\60\0\1\0"+
    "\1\0\3\0\2\0\2\0\5\0\2\0\1\0\1\0\1\0\30\0"+
    "\3\0\2\0\13\0\5\0\2\0\3\0\2\0\12\0\6\0\2\0"+
    "\6\0\2\0\6\0\11\0\7\0\1\0\7\0\221\0\43\0\10\0"+
    "\1\0\2\0\2\0\12\0\6\0\u2ba4\0\14\0\27\0\4\0\61\0"+
    "\u2104\0\u016e\0\2\0\152\0\46\0\7\0\14\0\5\0\5\0\1\0"+
    "\1\0\12\0\1\0\15\0\1\0\5\0\1\0\1\0\1\0\2\0"+
    "\1\0\2\0\1\0\154\0\41\0\u016b\0\22\0\100\0\2\0\66\0"+
    "\50\0\15\0\3\0\20\0\20\0\7\0\14\0\2\0\30\0\3\0"+
    "\31\0\1\0\6\0\5\0\1\0\207\0\2\0\1\0\4\0\1\0"+
    "\13\0\12\0\7\0\32\0\4\0\1\0\1\0\32\0\13\0\131\0"+
    "\3\0\6\0\2\0\6\0\2\0\6\0\2\0\3\0\3\0\2\0"+
    "\3\0\2\0\22\0\3\0\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    64,   128,   192,   256,   320,   384,   448,   512,   576, 
      640,   704,   128,   768,   832,   896,   960,  1024,  1088,  1152, 
     1216,  1280,  1344,  1408,  1472,  1536,  1600,  1664,  1728,  1792, 
     1856,  1920,  1984,  2048,  2112,  2176,  2240,  2304,  2368,   128, 
      128,   128,   128,  2432,   128,   128,   128,   128,   128,   128, 
     2496,  2560,  2624,   128,   128,   128,  2688,  2752,  2816,  1664, 
     1792,  2880,  2944,  3008,   128,   128,  3072,  3136,  3200,  3264, 
     3328,  3392,  3456,  3520,  3584,  3648,  3712,  3776,  3840,  3904, 
      256,  3968,  4032,  4096,  4160,  4224,  4288,  4352,  4416,  4480, 
     4544,  4608,   128,  4672,   128,   128,   128,  4736,   128,   128, 
      128,   128,   128,   128,   128,   128,   128,  4800,  4864,   128, 
     4928,   256,  4992,  5056,  5120,   128,  5184,  5248,  5312,  5376, 
     5440,  5504,  5568,  5632,  5696,  5760,  5824,  5888,  5952,  6016, 
     6080,  6144,  6208,  6272,  6336,  6400,   256,  6464,  6528,  6592, 
     6656,  6720,  6784,  6848,   128,   128,   128,  6912,   256,  6976, 
     7040,  7104,   256,  7168,  7232,  7296,  7360,   256,   256,  7424, 
      256,  7488,  7552,   256,  7616,  7680,  7744,  7808,  7872,  7936, 
     8000,  8064,   256,  8128,  8192,   256,   256,  8256,   256,  8320, 
      256,  8384,  8448,  8512,  8576,   256,  8640,  8704,   256,  8768, 
     8832,  8896,  8960,  9024,   256,  9088,  9152,  9216,   256,  9280, 
      256,  9344,   256,   256,   256,   256,   256,   256,  9408,  9472, 
     9536,   256,  9600,  9664,   256,  9728,   256,   256,   256,   256
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\3\5\1\6\1\7\1\5\1\10\1\11"+
    "\1\12\1\5\1\13\1\14\1\15\1\16\1\15\1\17"+
    "\1\20\1\5\1\21\1\22\1\23\1\5\1\24\1\25"+
    "\2\5\1\26\1\27\2\5\1\30\1\5\1\31\2\5"+
    "\1\32\1\33\1\5\1\34\1\3\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\100\3\101\0\1\4\2\0\1\63"+
    "\3\0\4\64\12\0\1\63\17\0\1\4\3\0\1\65"+
    "\26\0\4\5\1\0\6\5\5\0\27\5\35\0\1\66"+
    "\46\0\1\67\1\70\23\0\4\5\1\0\2\5\1\71"+
    "\3\5\5\0\2\5\1\72\24\5\31\0\4\5\1\0"+
    "\6\5\5\0\2\5\1\73\24\5\31\0\4\5\1\0"+
    "\6\5\5\0\27\5\1\74\2\0\1\75\25\0\4\5"+
    "\1\0\6\5\5\0\12\5\1\76\14\5\44\0\1\77"+
    "\1\100\37\0\1\101\77\0\1\102\40\0\1\15\62\0"+
    "\4\5\1\0\4\5\1\103\1\5\5\0\27\5\31\0"+
    "\4\5\1\0\6\5\5\0\22\5\1\104\4\5\31\0"+
    "\4\5\1\0\6\5\5\0\4\5\1\105\22\5\31\0"+
    "\4\5\1\0\6\5\5\0\5\5\1\106\21\5\31\0"+
    "\4\5\1\0\2\5\1\107\3\5\5\0\12\5\1\110"+
    "\3\5\1\111\10\5\31\0\4\5\1\0\6\5\5\0"+
    "\1\112\1\5\1\113\6\5\1\114\15\5\31\0\4\5"+
    "\1\0\6\5\5\0\1\5\1\115\7\5\1\116\1\5"+
    "\1\117\5\5\1\120\5\5\31\0\4\5\1\0\1\121"+
    "\5\5\5\0\12\5\1\122\14\5\31\0\4\5\1\0"+
    "\6\5\5\0\2\5\1\123\2\5\1\124\21\5\31\0"+
    "\4\5\1\0\6\5\5\0\2\5\1\125\24\5\31\0"+
    "\4\5\1\0\6\5\5\0\11\5\1\126\15\5\31\0"+
    "\4\5\1\0\6\5\5\0\2\5\1\127\24\5\31\0"+
    "\1\4\2\0\1\63\3\0\4\64\12\0\1\63\10\0"+
    "\1\130\6\0\1\4\1\130\2\0\1\65\25\0\50\131"+
    "\1\0\1\132\26\131\1\0\1\65\44\0\1\65\3\0"+
    "\1\133\25\0\51\75\1\134\1\75\1\135\24\75\54\0"+
    "\1\136\1\137\77\0\1\140\77\0\1\141\1\142\1\0"+
    "\1\51\10\0\1\57\63\0\1\143\1\0\1\144\74\0"+
    "\1\52\1\145\77\0\1\146\3\0\1\147\73\0\1\150"+
    "\77\0\1\151\5\0\1\152\71\0\1\153\76\0\1\60"+
    "\24\0\1\154\3\0\1\155\40\0\1\154\10\0\1\155"+
    "\30\0\4\64\65\0\1\65\2\0\1\63\1\0\4\156"+
    "\14\0\1\63\17\0\1\65\32\0\4\5\1\0\6\5"+
    "\5\0\2\5\1\157\24\5\31\0\4\5\1\0\6\5"+
    "\5\0\4\5\1\160\22\5\31\0\4\5\1\0\6\5"+
    "\5\0\12\5\1\161\14\5\31\0\4\5\1\0\6\5"+
    "\5\0\10\5\1\162\2\5\1\163\13\5\30\0\16\77"+
    "\1\164\1\165\60\77\15\166\1\167\62\166\1\0\4\5"+
    "\1\0\6\5\5\0\1\5\1\170\25\5\31\0\4\5"+
    "\1\0\6\5\5\0\23\5\1\171\3\5\31\0\4\5"+
    "\1\0\6\5\5\0\5\5\1\172\21\5\31\0\4\5"+
    "\1\0\6\5\5\0\1\5\1\173\15\5\1\174\7\5"+
    "\31\0\4\5\1\0\6\5\5\0\10\5\1\175\16\5"+
    "\31\0\4\5\1\0\4\5\1\176\1\5\5\0\27\5"+
    "\31\0\4\5\1\0\6\5\5\0\1\5\1\177\25\5"+
    "\31\0\4\5\1\0\6\5\5\0\10\5\1\200\16\5"+
    "\31\0\4\5\1\0\6\5\5\0\12\5\1\201\14\5"+
    "\31\0\4\5\1\0\6\5\5\0\1\202\26\5\31\0"+
    "\4\5\1\0\6\5\5\0\1\203\3\5\1\204\22\5"+
    "\31\0\4\5\1\0\6\5\5\0\2\5\1\205\24\5"+
    "\31\0\4\5\1\0\6\5\5\0\17\5\1\206\1\207"+
    "\6\5\31\0\4\5\1\0\6\5\5\0\13\5\1\210"+
    "\13\5\31\0\4\5\1\0\6\5\5\0\1\5\1\211"+
    "\25\5\31\0\4\5\1\0\4\5\1\212\1\5\5\0"+
    "\27\5\31\0\4\5\1\0\1\213\5\5\5\0\27\5"+
    "\31\0\4\5\1\0\6\5\5\0\1\5\1\214\25\5"+
    "\31\0\4\5\1\0\6\5\5\0\13\5\1\215\13\5"+
    "\31\0\4\5\1\0\2\5\1\216\3\5\5\0\13\5"+
    "\1\217\13\5\31\0\1\220\1\0\2\220\1\0\2\220"+
    "\11\0\1\220\2\0\1\220\1\0\1\220\1\0\1\220"+
    "\4\0\1\220\10\0\1\220\31\0\50\131\1\156\1\132"+
    "\44\131\1\0\61\131\52\0\1\221\25\0\16\75\1\0"+
    "\61\75\55\0\1\222\77\0\1\223\23\0\1\154\4\0"+
    "\4\156\34\0\1\154\32\0\1\154\44\0\1\154\32\0"+
    "\4\5\1\0\6\5\5\0\1\224\26\5\31\0\4\5"+
    "\1\0\6\5\5\0\17\5\1\225\7\5\31\0\4\5"+
    "\1\0\6\5\5\0\13\5\1\226\13\5\31\0\4\5"+
    "\1\0\6\5\5\0\2\5\1\227\24\5\46\0\1\164"+
    "\61\0\15\166\1\230\62\166\14\0\1\164\1\167\63\0"+
    "\4\5\1\0\6\5\5\0\2\5\1\231\24\5\31\0"+
    "\4\5\1\0\6\5\5\0\5\5\1\232\21\5\31\0"+
    "\4\5\1\0\6\5\5\0\1\233\26\5\31\0\4\5"+
    "\1\0\4\5\1\234\1\5\5\0\27\5\31\0\4\5"+
    "\1\0\6\5\5\0\13\5\1\235\13\5\31\0\4\5"+
    "\1\0\6\5\5\0\5\5\1\236\21\5\31\0\4\5"+
    "\1\0\6\5\5\0\15\5\1\237\11\5\31\0\4\5"+
    "\1\0\6\5\5\0\5\5\1\240\21\5\31\0\4\5"+
    "\1\0\6\5\5\0\5\5\1\241\21\5\31\0\4\5"+
    "\1\0\6\5\5\0\1\5\1\242\6\5\1\243\16\5"+
    "\31\0\4\5\1\0\6\5\5\0\4\5\1\244\22\5"+
    "\31\0\4\5\1\0\6\5\5\0\1\5\1\245\25\5"+
    "\31\0\4\5\1\0\4\5\1\246\1\5\5\0\27\5"+
    "\31\0\4\5\1\0\6\5\5\0\4\5\1\247\22\5"+
    "\31\0\4\5\1\0\6\5\5\0\12\5\1\250\14\5"+
    "\31\0\4\5\1\0\6\5\5\0\5\5\1\251\21\5"+
    "\31\0\4\5\1\0\6\5\5\0\1\5\1\252\25\5"+
    "\31\0\4\5\1\0\6\5\5\0\3\5\1\253\23\5"+
    "\31\0\4\5\1\0\6\5\5\0\1\254\26\5\31\0"+
    "\4\5\1\0\6\5\5\0\2\5\1\255\24\5\31\0"+
    "\4\5\1\0\2\5\1\256\3\5\5\0\27\5\31\0"+
    "\4\5\1\0\6\5\5\0\1\257\26\5\31\0\4\5"+
    "\1\0\6\5\5\0\14\5\1\260\12\5\31\0\1\220"+
    "\1\0\2\220\1\0\2\220\4\64\5\0\1\220\2\0"+
    "\1\220\1\0\1\220\1\0\1\220\4\0\1\220\10\0"+
    "\1\220\32\0\4\5\1\0\6\5\5\0\1\5\1\261"+
    "\25\5\31\0\4\5\1\0\6\5\5\0\17\5\1\262"+
    "\7\5\31\0\4\5\1\0\6\5\5\0\12\5\1\263"+
    "\14\5\30\0\14\166\1\164\1\230\62\166\1\0\4\5"+
    "\1\0\6\5\5\0\14\5\1\264\12\5\31\0\4\5"+
    "\1\0\6\5\5\0\6\5\1\265\20\5\31\0\4\5"+
    "\1\0\6\5\5\0\4\5\1\266\22\5\31\0\4\5"+
    "\1\0\6\5\5\0\10\5\1\267\16\5\31\0\4\5"+
    "\1\0\6\5\5\0\4\5\1\270\22\5\31\0\4\5"+
    "\1\0\6\5\5\0\13\5\1\271\13\5\31\0\4\5"+
    "\1\0\6\5\5\0\1\5\1\272\25\5\31\0\4\5"+
    "\1\0\6\5\5\0\13\5\1\273\13\5\31\0\4\5"+
    "\1\0\6\5\5\0\7\5\1\274\17\5\31\0\4\5"+
    "\1\0\6\5\5\0\1\5\1\275\25\5\31\0\4\5"+
    "\1\0\6\5\5\0\5\5\1\276\21\5\31\0\4\5"+
    "\1\0\6\5\5\0\2\5\1\277\24\5\31\0\4\5"+
    "\1\0\6\5\5\0\7\5\1\300\17\5\31\0\4\5"+
    "\1\0\2\5\1\301\3\5\5\0\27\5\31\0\4\5"+
    "\1\0\4\5\1\302\1\5\5\0\27\5\31\0\4\5"+
    "\1\0\6\5\5\0\5\5\1\303\21\5\31\0\4\5"+
    "\1\0\6\5\5\0\1\5\1\304\25\5\31\0\4\5"+
    "\1\0\6\5\5\0\12\5\1\305\14\5\31\0\4\5"+
    "\1\0\6\5\5\0\5\5\1\306\21\5\31\0\4\5"+
    "\1\0\6\5\5\0\12\5\1\307\14\5\31\0\4\5"+
    "\1\0\6\5\5\0\1\5\1\310\25\5\31\0\4\5"+
    "\1\0\6\5\5\0\12\5\1\311\14\5\31\0\4\5"+
    "\1\0\6\5\5\0\12\5\1\312\14\5\31\0\4\5"+
    "\1\0\6\5\5\0\7\5\1\313\17\5\31\0\4\5"+
    "\1\0\6\5\5\0\1\5\1\314\25\5\31\0\4\5"+
    "\1\0\6\5\5\0\14\5\1\315\12\5\31\0\4\5"+
    "\1\0\1\316\5\5\5\0\27\5\31\0\4\5\1\0"+
    "\6\5\5\0\11\5\1\317\15\5\31\0\4\5\1\0"+
    "\6\5\5\0\5\5\1\320\21\5\31\0\4\5\1\0"+
    "\2\5\1\321\3\5\5\0\27\5\31\0\4\5\1\0"+
    "\6\5\5\0\13\5\1\322\13\5\31\0\4\5\1\0"+
    "\6\5\5\0\5\5\1\323\21\5\31\0\4\5\1\0"+
    "\1\324\5\5\5\0\27\5\31\0\4\5\1\0\6\5"+
    "\5\0\5\5\1\325\21\5\31\0\4\5\1\0\4\5"+
    "\1\326\1\5\5\0\27\5\31\0\4\5\1\0\6\5"+
    "\5\0\1\5\1\327\25\5\31\0\4\5\1\0\2\5"+
    "\1\330\3\5\5\0\27\5\31\0\4\5\1\0\6\5"+
    "\5\0\14\5\1\331\12\5\31\0\4\5\1\0\6\5"+
    "\5\0\4\5\1\332\22\5\31\0\4\5\1\0\6\5"+
    "\5\0\5\5\1\333\21\5\31\0\4\5\1\0\6\5"+
    "\5\0\5\5\1\334\21\5\30\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  1,  9,  9,  9,  9, 
     9,  9,  0,  1,  1,  9,  9,  9,  1,  1,  1,  0,  0,  1,  0,  0, 
     9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  9,  1,  9,  9, 
     9,  1,  9,  9,  9,  9,  9,  9,  9,  9,  9,  1,  0,  9,  1,  1, 
     1,  1,  1,  9,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  9,  9,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    private int typecheck(String s){
		if (Parser.lookupType(s.trim()))
			return TYPE_NAME;
		else 
			return IDENTIFIER;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[9792];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2270) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 2: 
        case 27: 
        case 29: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 221: break;
        case 37: 
          {  return symbol("OR",OR);  }
        case 222: break;
        case 11: 
          {  return symbol("MUL",MUL);  }
        case 223: break;
        case 36: 
          {  return symbol("XOR",XOR);  }
        case 224: break;
        case 38: 
          {  return symbol("NOT",NOT);  }
        case 225: break;
        case 47: 
          {  return symbol("SQUAREDR",SQUAREDR);  }
        case 226: break;
        case 46: 
          {  return symbol("SQUAREDL",SQUAREDL);  }
        case 227: break;
        case 214: 
          {  return symbol("DEFAULT",DEFAULT,yytext());  }
        case 228: break;
        case 203: 
          {  return symbol("STRUCT",STRUCT,yytext());  }
        case 229: break;
        case 188: 
          {  return symbol("SHORT",SHORT,yytext());  }
        case 230: break;
        case 80: 
          {  return symbol("GOTO",IF,yytext());  }
        case 231: break;
        case 52: 
        case 109: 
          {  return symbol("CONSTANT",CONSTANT,yytext());  }
        case 232: break;
        case 3: 
        case 26: 
        case 51: 
          {  return symbol("CONSTANT",CONSTANT,yytext());  }
        case 233: break;
        case 107: 
          {  return symbol("CONSTANT",CONSTANT,yytext());  }
        case 234: break;
        case 136: 
          {  return symbol("INT",INT, yytext());  }
        case 235: break;
        case 143: 
          {  return symbol("CONSTANT",CONSTANT,yytext());  }
        case 236: break;
        case 176: 
          {  return symbol("FLOAT",FLOAT,yytext());  }
        case 237: break;
        case 185: 
          {  return symbol("CONST",CONST,yytext());  }
        case 238: break;
        case 217: 
          {  return symbol("REGISTER",REGISTER,yytext());  }
        case 239: break;
        case 30: 
          {  return symbol("GREATER",GREATER);  }
        case 240: break;
        case 111: 
          {  return symbol("FOR",FOR,yytext());  }
        case 241: break;
        case 163: 
          {  return symbol("CHAR",CHAR,yytext());  }
        case 242: break;
        case 54: 
          {  return symbol("PTR_OP",PTR_OP);  }
        case 243: break;
        case 34: 
          {  return symbol("MODULUS",MODULUS);  }
        case 244: break;
        case 82: 
          {  return symbol("DO",DO,yytext());  }
        case 245: break;
        case 152: 
          {  return symbol("AUTO",AUTO,yytext());  }
        case 246: break;
        case 172: 
          {  return symbol("GOTO",GOTO,yytext());  }
        case 247: break;
        case 200: 
          {  return symbol("EXTERN",EXTERN,yytext());  }
        case 248: break;
        case 198: 
          {  return symbol("RETURN",RETURN,yytext());  }
        case 249: break;
        case 178: 
          {  return symbol("UNION",UNION,yytext());  }
        case 250: break;
        case 158: 
          {  return symbol("ENUM",ENUM,yytext());  }
        case 251: break;
        case 92: 
          {  return symbol("STRING_LITERAL",STRING_LITERAL,yytext());  }
        case 252: break;
        case 144: 
          {  return symbol("ELLIPSIS",ELLIPSIS);  }
        case 253: break;
        case 180: 
          {  return symbol("BREAK",BREAK,yytext());  }
        case 254: break;
        case 99: 
          {  return symbol("INC_OP",INC_OP);  }
        case 255: break;
        case 206: 
          {  return symbol("SWITCH",SWITCH,yytext());  }
        case 256: break;
        case 93: 
          {  return symbol("RIGHT_OP",RIGHT_OP);  }
        case 257: break;
        case 211: 
          {  return symbol("TYPEDEF",TYPEDEF,yytext());  }
        case 258: break;
        case 205: 
          {  return symbol("SIZEOF",SIZEOF,yytext());  }
        case 259: break;
        case 219: 
          {  return symbol("VOLATILE",VOLATILE,yytext());  }
        case 260: break;
        case 218: 
          {  return symbol("CONTINUE",CONTINUE,yytext());  }
        case 261: break;
        case 207: 
          {  return symbol("DOUBLE",DOUBLE,yytext());  }
        case 262: break;
        case 194: 
          {  return symbol("WHILE",WHILE,yytext());  }
        case 263: break;
        case 97: 
          {  return symbol("LEFT_OP",LEFT_OP);  }
        case 264: break;
        case 157: 
          {  return symbol("ELSE",ELSE,yytext());  }
        case 265: break;
        case 160: 
          {  return symbol("CASE",CASE,yytext());  }
        case 266: break;
        case 216: 
          {  return symbol("UNSIGNED",UNSIGNED,yytext());  }
        case 267: break;
        case 204: 
          {  return symbol("SIGNED",SIGNED,yytext());  }
        case 268: break;
        case 53: 
          {  return symbol("DEC_OP",DEC_OP);  }
        case 269: break;
        case 10: 
          {  return symbol("DIVIDE",DIVIDE);  }
        case 270: break;
        case 175: 
          {  return symbol("VOID",VOID,yytext());  }
        case 271: break;
        case 202: 
          {  return symbol("STATIC",STATIC,yytext());  }
        case 272: break;
        case 41: 
          {  return symbol("CURLYR",CURLYR);  }
        case 273: break;
        case 40: 
          {  return symbol("CURLYL",CURLYL);  }
        case 274: break;
        case 65: 
          {  return symbol("MUL_ASSIGN",MUL_ASSIGN);  }
        case 275: break;
        case 64: 
          {  return symbol("DIV_ASSIGN",DIV_ASSIGN);  }
        case 276: break;
        case 55: 
          {  return symbol("SUB_ASSIGN",SUB_ASSIGN);  }
        case 277: break;
        case 31: 
          {  return symbol("ASSIGN",ASSIGN);  }
        case 278: break;
        case 35: 
          {  return symbol("ADRESS",ADRESS);  }
        case 279: break;
        case 98: 
          {  return symbol("ADD_ASSIGN",ADD_ASSIGN);  }
        case 280: break;
        case 100: 
          {  return symbol("MOD_ASSIGN",MOD_ASSIGN);  }
        case 281: break;
        case 101: 
          {  return symbol("AND_ASSIGN",AND_ASSIGN);  }
        case 282: break;
        case 102: 
          {  return symbol("AND_OP",AND_OP);  }
        case 283: break;
        case 103: 
          {  return symbol("XOR_ASSIGN",XOR_ASSIGN);  }
        case 284: break;
        case 104: 
          {  return symbol("OR_ASSIGN",OR_ASSIGN);  }
        case 285: break;
        case 145: 
          {  return symbol("RIGHT_ASSIGN",RIGHT_ASSIGN);  }
        case 286: break;
        case 146: 
          {  return symbol("LEFT_ASSIGN",LEFT_ASSIGN);  }
        case 287: break;
        case 4: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 56: 
        case 57: 
        case 58: 
        case 61: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 81: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 110: 
        case 112: 
        case 113: 
        case 114: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 147: 
        case 149: 
        case 150: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 159: 
        case 161: 
        case 162: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 173: 
        case 174: 
        case 177: 
        case 179: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 186: 
        case 187: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 195: 
        case 196: 
        case 197: 
        case 199: 
        case 201: 
        case 208: 
        case 209: 
        case 210: 
        case 212: 
        case 213: 
        case 215: 
          {  return symbol(yytext(), typecheck(yytext()));  }
        case 288: break;
        case 49: 
          {  return symbol("COND",COND);  }
        case 289: break;
        case 39: 
          {  return symbol("SEMI",SEMI);  }
        case 290: break;
        case 32: 
          {  return symbol("LESS",LESS);  }
        case 291: break;
        case 33: 
          {  return symbol("PLUS",PLUS);  }
        case 292: break;
        case 48: 
          {  return symbol("TILDE",TILDE);  }
        case 293: break;
        case 45: 
          {  return symbol("PARAR",PARAR);  }
        case 294: break;
        case 44: 
          {  return symbol("PARAL",PARAL);  }
        case 295: break;
        case 43: 
          {  return symbol("COLON",COLON);  }
        case 296: break;
        case 42: 
          {  return symbol("COMMA",COMMA);  }
        case 297: break;
        case 28: 
          {  return symbol("POINT",POINT);  }
        case 298: break;
        case 5: 
          {  return symbol("MINUS",MINUS);  }
        case 299: break;
        case 94: 
          {  return symbol("GE_OP",GE_OP);  }
        case 300: break;
        case 95: 
          {  return symbol("EQ_OP",EQ_OP);  }
        case 301: break;
        case 96: 
          {  return symbol("LE_OP",LE_OP);  }
        case 302: break;
        case 105: 
          {  return symbol("OR_OP",OR_OP);  }
        case 303: break;
        case 106: 
          {  return symbol("NE_OP",NE_OP);  }
        case 304: break;
        case 148: 
          {  return symbol("LONG", LONG, yytext());  }
        case 305: break;
        case 12: 
        case 13: 
          {  /* ignore bad characters */  }
        case 306: break;
        case 115: 
        case 116: 
          {   }
        case 307: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
